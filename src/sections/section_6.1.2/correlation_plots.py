"""
Correlation Analysis and Plotting for DebiasDiffusion

This script analyzes and visualizes the correlation between estimated and real biases as measured by the FD metric
in the DebiasDiffusion pipeline. It processes the JSON file generated by correlation_data_generation.py,
creates line plots of correlations over time, and scatter plots of estimated vs. real biases.

Usage:
    python src/sections/section_6.1.2/correlation_plots.py [--args]

Arguments:
    --input_file: Path to the JSON file containing correlation data (default: BASE_DIR / "results/section_6.1.2/correlation_data/correlation_data.json")
    --output_dir: Directory to save output plots (default: BASE_DIR / "results/section_6.1.2/correlation_plots")
    --show_legend: Show legends in plots (default: True)
    --save_svg: Save plots in SVG format (default: True)
    --supported_attributes: List of attributes to evaluate (default: ['gender', 'race'])
    --mark_timesteps: Timesteps to mark in the line plot (default: [46, 41, 36, 31, 26])
    --grid_timesteps: Timesteps to plot in the correlation grid (default: range(1, 51))
    --fontsize_base: Base font size (default: 14)
    --fontsize_label: Font size for axis labels (default: 16)
    --fontsize_title: Font size for plot titles (default: 16)
    --fontsize_tick: Font size for tick labels (default: 14)
    --fontsize_legend: Font size for legends (default: 16)
    --fontsize_text: Font size for additional text in plots (default: 14)
    --hide_inner_ticks: Hide tick labels for inner plots in the grid (default: True)
    --split_grid: Split the grid plot into two separate plots (default: True)

Outputs:
    - Line plot of Pearson correlation over timesteps for each attribute
    - Grid of scatter plots showing estimated vs. real bias for selected timesteps
    - Console output with correlation statistics
"""

import json
import os
import sys
from pathlib import Path
from typing import Dict, List, Tuple, Any

import torch
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import pearsonr
import argparse
from matplotlib.gridspec import GridSpec

SCRIPT_DIR = Path(__file__).resolve().parent
BASE_DIR = SCRIPT_DIR.parent.parent.parent
sys.path.append(str(BASE_DIR))

def bias_metric(probs_list: List[List[float]], p_tar: List[float]) -> List[float]:
    """
    Calculate the bias metric for a list of probability distributions.
    
    Args:
        probs_list (List[List[float]]): List of probability distributions
        p_tar (List[float]): Target probability distribution
    
    Returns:
        List[float]: List of bias metric values
    """
    if isinstance(p_tar, torch.Tensor):
        p_tar = p_tar.cpu().numpy()
    elif isinstance(p_tar, list):
        p_tar = np.array(p_tar)
    
    metric_values = []

    for probs in probs_list:
        probs = np.array(probs)
        expected_distribution = np.mean(probs, axis=0)
        diff = expected_distribution - p_tar
        metric_value = np.linalg.norm(diff) ** 2
        metric_values.append(metric_value)
    
    return metric_values

def plot_correlation_lines(all_results: Dict[str, Any], plots_dir: Path, args: argparse.Namespace) -> None:
    """
    Plot line graph of Pearson correlation over timesteps for each attribute.
    
    Args:
        all_results (Dict[str, Any]): Dictionary containing correlation data
        plots_dir (Path): Directory to save the plot
        args (argparse.Namespace): Command-line arguments
    """
    fig, ax = plt.subplots(figsize=(11, 5))
    vertical_line_color = '#808080'  # Gray color for vertical lines
    
    for t in args.mark_timesteps:
        ax.axvline(x=t, color=vertical_line_color, linestyle='--', alpha=0.5)
    
    for attr in args.supported_attributes:
        timesteps = len(all_results[attr][list(all_results[attr].keys())[0]]['estimated_probs'])
        correlations = []
        for t in range(timesteps):
            estimated_biases = []
            real_biases = []
            for occupation, results in all_results[attr].items():
                p_tar = [0.5, 0.5] if attr != 'race' else [0.25, 0.25, 0.25, 0.25]
                estimated_bias = bias_metric(results['estimated_probs'], p_tar)[t]
                real_bias = bias_metric([results['real_probs']], p_tar)[0]
                estimated_biases.append(estimated_bias)
                real_biases.append(real_bias)
            correlation, _ = pearsonr(estimated_biases, real_biases)
            correlations.append(correlation)
        
        ax.plot(range(50, 0, -1), correlations, label=attr.capitalize(), linewidth=2)

    ax.invert_xaxis()
    ax.set_xticks(range(50, 0, -5))
    ax.set_xticklabels(range(50, 0, -5))

    ax.set_xlabel('Timestep', fontsize=args.fontsize_label)
    ax.set_ylabel('Pearson Correlation r', fontsize=args.fontsize_label)
    ax.xaxis.set_label_coords(0.5, -0.1) 
    ax.yaxis.set_label_coords(-0.075, 0.5)
    if args.show_legend:
        ax.legend(fontsize=args.fontsize_legend)
    plt.tight_layout()
    plt.savefig(plots_dir / 'pearson_correlation_all_attributes.png', dpi=300, bbox_inches='tight')
    if args.save_svg:
        plt.savefig(plots_dir / 'pearson_correlation_all_attributes.svg', bbox_inches='tight')
    plt.close()

def plot_correlation_scatter(all_results: Dict[str, Any], ax: plt.Axes, timestep: int, attr: str, args: argparse.Namespace) -> None:
    """
    Create a scatter plot of estimated vs. real bias for a specific timestep and attribute.
    
    Args:
        all_results (Dict[str, Any]): Dictionary containing correlation data
        ax (plt.Axes): Matplotlib axes object to plot on
        timestep (int): Timestep to plot
        attr (str): Attribute to plot
        args (argparse.Namespace): Command-line arguments
    """
    estimated_biases = []
    real_biases = []
    for occupation, results in all_results[attr].items():
        p_tar = [0.5, 0.5] if attr != 'race' else [0.25, 0.25, 0.25, 0.25]
        test = bias_metric(results['estimated_probs'], p_tar)
        estimated_bias = test[timestep]
        real_bias = bias_metric([results['real_probs']], p_tar)[0]
        estimated_biases.append(estimated_bias)
        real_biases.append(real_bias)
    
    ax.scatter(estimated_biases, real_biases, alpha=0.6)

    m, b = np.polyfit(estimated_biases, real_biases, 1)
    x_line = np.array([-0.025, 0.525 if attr == "gender" else 0.775])
    y_line = m * x_line + b
    ax.plot(x_line, y_line, color='r', linestyle='--')
    
    ax.set_xlim(-0.025, 0.525 if attr == "gender" else 0.775)
    ax.set_ylim(-0.025, 0.525 if attr == "gender" else 0.775)
    
    r_squared = np.corrcoef(estimated_biases, real_biases)[0, 1]**2
    print(f"ATTR: {attr} | TIMESTEP: {timestep} | CORRELATION: {r_squared:.3f}")

def plot_correlation_grids(all_results: Dict[str, Any], plots_dir: Path, args: argparse.Namespace) -> None:
    """
    Create grid plots of correlation scatter plots for different timesteps and attributes.
    
    Args:
        all_results (Dict[str, Any]): Dictionary containing correlation data
        plots_dir (Path): Directory to save the plots
        args (argparse.Namespace): Command-line arguments
    """
    timesteps = sorted(args.grid_timesteps, reverse=True)
    num_plots = len(timesteps)
    
    for attr in args.supported_attributes:
        if args.split_grid:
            mid_point = num_plots // 2
            plot_ranges = [timesteps[:mid_point], timesteps[mid_point:]]
        else:
            plot_ranges = [timesteps]
        
        for idx, plot_range in enumerate(plot_ranges):
            ncols = min(5, len(plot_range))
            nrows = (len(plot_range) + ncols - 1) // ncols
            
            figsize_width = 3 * ncols
            figsize_height = 3 * nrows
            
            fig = plt.figure(figsize=(figsize_width, figsize_height))
            gs = GridSpec(nrows, ncols, figure=fig)
            
            for i, t in enumerate(plot_range):
                ax = fig.add_subplot(gs[i // ncols, i % ncols])
                plot_correlation_scatter(all_results, ax, t, attr, args)
                ax.set_title(f'Timestep = {50-t}', fontsize=args.fontsize_title, pad=10)
                
                if args.hide_inner_ticks:
                    if i // ncols != nrows - 1:  # Not bottom row
                        ax.set_xticklabels([])
                    if i % ncols != 0:  # Not left column
                        ax.set_yticklabels([])
                
                if i // ncols == nrows - 1:  # Bottom row
                    ax.set_xlabel('Estimated Bias', fontsize=args.fontsize_label)
                else:
                    ax.set_xlabel('')
                
                if i % ncols == 0:  # Left column
                    ax.set_ylabel('Real Bias', fontsize=args.fontsize_label)
                else:
                    ax.set_ylabel('')
                
                ax.xaxis.set_label_coords(0.5, -0.2) 
                ax.yaxis.set_label_coords(-0.2, 0.5)
                
                ax.set_xlim(-0.025, 0.525 if attr == "gender" else 0.775)
                ax.set_ylim(-0.025, 0.525 if attr == "gender" else 0.775)

            plt.tight_layout()
            suffix = f'_part{idx+1}' if args.split_grid else ''
            plt.savefig(plots_dir / f'correlation_grid_{attr}{suffix}.png', dpi=300, bbox_inches='tight')
            if args.save_svg:
                plt.savefig(plots_dir / f'correlation_grid_{attr}{suffix}.svg', bbox_inches='tight')
            plt.close()

def main(args: argparse.Namespace) -> None:
    with open(args.input_file, 'r') as f:
        all_results = json.load(f)

    plots_dir = Path(args.output_dir)
    plots_dir.mkdir(parents=True, exist_ok=True)

    plt.rcParams.update({
        'font.size': args.fontsize_base,
        'axes.labelsize': args.fontsize_label,
        'axes.titlesize': args.fontsize_title,
        'xtick.labelsize': args.fontsize_tick,
        'ytick.labelsize': args.fontsize_tick,
        'legend.fontsize': args.fontsize_legend
    })

    plot_correlation_lines(all_results, plots_dir, args)
    plot_correlation_grids(all_results, plots_dir, args)

def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Analyze and plot correlation data for DebiasDiffusion")
    parser.add_argument("--input_file", type=str, default=str(BASE_DIR / "data/experiments/section_6.1.2/6.1.2_correlation_data/correlation_data.json"), help="Path to the input JSON file containing the results")
    parser.add_argument("--output_dir", type=str, default=str(BASE_DIR / "results/section_6.1.2/correlation_plots"), help="Directory to save output plots")
    parser.add_argument("--show_legend", action="store_true", default=True, help="Show legends in plots")
    parser.add_argument("--save_svg", action="store_true", default=True, help="Save plots in SVG format")
    parser.add_argument("--supported_attributes", default=['gender', 'race'], nargs='+', help="The list of attributes to evaluate")
    parser.add_argument("--mark_timesteps", nargs='+', type=int, default=[46, 41, 36, 31, 26], help="Timesteps to mark in the line plot")
    parser.add_argument("--grid_timesteps", nargs='+', type=int, default=list(range(0, 50)), help="Timesteps to plot in the correlation grid")
    parser.add_argument("--fontsize_base", type=int, default=14, help="Base font size")
    parser.add_argument("--fontsize_label", type=int, default=16, help="Font size for axis labels")
    parser.add_argument("--fontsize_title", type=int, default=16, help="Font size for plot titles")
    parser.add_argument("--fontsize_tick", type=int, default=14, help="Font size for tick labels")
    parser.add_argument("--fontsize_legend", type=int, default=16, help="Font size for legends")
    parser.add_argument("--fontsize_text", type=int, default=14, help="Font size for additional text in plots")
    parser.add_argument("--hide_inner_ticks", action="store_true", default=True, help="Hide tick labels for inner plots in the grid")
    parser.add_argument("--split_grid", action="store_true", default=True, help="Split the grid plot into two separate plots")
    return parser.parse_args()

if __name__ == "__main__":
    args = parse_args()
    main(args)